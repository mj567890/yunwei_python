#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Âø´ÈÄüÊï∞ÊçÆÂ∫ìÂçáÁ∫ßËÑöÊú¨
"""

import sqlite3
import os

def main():
    # Êï∞ÊçÆÂ∫ìÊñá‰ª∂Ë∑ØÂæÑ
    db_path = os.path.join(os.path.dirname(__file__), 'it_ops_system.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Êï∞ÊçÆÂ∫ìÊñá‰ª∂‰∏çÂ≠òÂú®: {db_path}")
        return False
    
    print(f"üîß ËøûÊé•Êï∞ÊçÆÂ∫ì: {db_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        print("üöÄ ÂºÄÂßãÂçáÁ∫ßÊï∞ÊçÆÂ∫ìË°®ÁªìÊûÑ...")
        
        # 1. ÂàõÂª∫ asset_category Ë°®ÔºàÂ¶ÇÊûú‰∏çÂ≠òÂú®Ôºâ
        print("\nüîß ÂàõÂª∫ asset_category Ë°®...")
        
        create_category_sql = """
        CREATE TABLE IF NOT EXISTS asset_category (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(50) NOT NULL UNIQUE,
            code VARCHAR(20) NOT NULL UNIQUE,
            parent_id INTEGER,
            description TEXT,
            sort_order INTEGER DEFAULT 0,
            is_network_device BOOLEAN DEFAULT 0,
            can_topology BOOLEAN DEFAULT 0,
            is_terminal BOOLEAN DEFAULT 0,
            default_port_count INTEGER,
            device_icon VARCHAR(20),
            device_color VARCHAR(20),
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            is_deleted BOOLEAN DEFAULT 0,
            FOREIGN KEY (parent_id) REFERENCES asset_category(id)
        )
        """
        
        cursor.execute(create_category_sql)
        print("‚úÖ ÂàõÂª∫ asset_category Ë°®")
        
        # 2. ÊèíÂÖ•Âü∫Á°ÄËµÑ‰∫ßÁ±ªÂà´Êï∞ÊçÆ
        print("\nüè∑Ô∏è  ÊèíÂÖ•Âü∫Á°ÄËµÑ‰∫ßÁ±ªÂà´...")
        
        categories = [
            ('‰∫§Êç¢Êú∫', 'SWITCH', 1, 1, 0, 24, 'üîÄ', '#409eff', 'ÁΩëÁªú‰∫§Êç¢ËÆæÂ§á'),
            ('Ë∑ØÁî±Âô®', 'ROUTER', 1, 1, 0, 8, 'üåê', '#67c23a', 'ÁΩëÁªúË∑ØÁî±ËÆæÂ§á'), 
            ('Èò≤ÁÅ´Â¢ô', 'FIREWALL', 1, 1, 0, 6, 'üõ°Ô∏è', '#e6a23c', 'ÁΩëÁªúÂÆâÂÖ®ËÆæÂ§á'),
            ('ÊúçÂä°Âô®', 'SERVER', 1, 0, 1, 2, 'üñ•Ô∏è', '#606266', 'ÊúçÂä°Âô®ËÆæÂ§á'),
            ('Â∑•‰ΩúÁ´ô', 'WORKSTATION', 1, 0, 1, 1, 'üíª', '#909399', 'ÂäûÂÖ¨Â∑•‰ΩúÁ´ô'),
            ('Âè∞ÂºèÊú∫', 'DESKTOP', 1, 0, 1, 1, 'üñ±Ô∏è', '#c0c4cc', 'Âè∞ÂºèËÆ°ÁÆóÊú∫'),
            ('Á¨îËÆ∞Êú¨', 'LAPTOP', 1, 0, 1, 1, 'üíæ', '#dcdfe6', '‰æøÊê∫ÂºèËÆ°ÁÆóÊú∫'),
            ('ÊâìÂç∞Êú∫', 'PRINTER', 0, 0, 0, 0, 'üñ®Ô∏è', '#f56c6c', 'ÊâìÂç∞ËÆæÂ§á'),
            ('ÊòæÁ§∫Âô®', 'MONITOR', 0, 0, 0, 0, 'üñ•Ô∏è', '#909399', 'ÊòæÁ§∫ËÆæÂ§á'),
            ('ÁΩëÁªúËÆæÂ§á', 'NETWORK_DEVICE', 1, 1, 0, 0, 'üì°', '#409eff', 'ÈÄöÁî®ÁΩëÁªúËÆæÂ§á')
        ]
        
        insert_count = 0
        for name, code, is_net, can_topo, is_term, port_count, icon, color, desc in categories:
            try:
                cursor.execute("""
                    INSERT OR IGNORE INTO asset_category 
                    (name, code, is_network_device, can_topology, is_terminal, 
                     default_port_count, device_icon, device_color, description)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (name, code, is_net, can_topo, is_term, port_count, icon, color, desc))
                
                if cursor.rowcount > 0:
                    print(f"‚úÖ Ê∑ªÂä†Á±ªÂà´: {name}")
                    insert_count += 1
                else:
                    print(f"‚ö†Ô∏è  Á±ªÂà´ {name} Â∑≤Â≠òÂú®ÔºåË∑≥Ëøá")
                    
            except Exception as e:
                print(f"‚ùå Ê∑ªÂä†Á±ªÂà´ {name} Â§±Ë¥•: {str(e)}")
        
        # 3. ÂàõÂª∫ asset_port Ë°®
        print("\nüîß ÂàõÂª∫ asset_port Ë°®...")
        
        create_asset_port_sql = """
        CREATE TABLE IF NOT EXISTS asset_port (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            asset_id INTEGER NOT NULL,
            port_name VARCHAR(50) NOT NULL,
            port_type VARCHAR(20),
            port_speed VARCHAR(20),
            port_status VARCHAR(20) DEFAULT 'unused',
            port_index INTEGER,
            is_uplink BOOLEAN DEFAULT 0,
            duplex_mode VARCHAR(10),
            vlan_id INTEGER,
            ip_address VARCHAR(15),
            mac_address VARCHAR(17),
            is_connected BOOLEAN DEFAULT 0,
            connected_port_id INTEGER,
            cable_type VARCHAR(20),
            cable_length REAL,
            description VARCHAR(255),
            last_link_time DATETIME,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            is_deleted BOOLEAN DEFAULT 0,
            FOREIGN KEY (asset_id) REFERENCES it_asset(id),
            FOREIGN KEY (connected_port_id) REFERENCES asset_port(id),
            UNIQUE (asset_id, port_name)
        )
        """
        
        cursor.execute(create_asset_port_sql)
        print("‚úÖ ÂàõÂª∫ asset_port Ë°®")
        
        # 4. ÂàõÂª∫ port_connection Ë°®
        print("\nüîß ÂàõÂª∫ port_connection Ë°®...")
        
        create_port_connection_sql = """
        CREATE TABLE IF NOT EXISTS port_connection (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            source_port_id INTEGER NOT NULL,
            target_port_id INTEGER NOT NULL,
            cable_type VARCHAR(20),
            cable_length REAL,
            connection_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            disconnection_date DATETIME,
            connected_by INTEGER,
            disconnected_by INTEGER,
            notes TEXT,
            is_active BOOLEAN DEFAULT 1,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            is_deleted BOOLEAN DEFAULT 0,
            FOREIGN KEY (source_port_id) REFERENCES asset_port(id),
            FOREIGN KEY (target_port_id) REFERENCES asset_port(id),
            FOREIGN KEY (connected_by) REFERENCES sys_user(id),
            FOREIGN KEY (disconnected_by) REFERENCES sys_user(id)
        )
        """
        
        cursor.execute(create_port_connection_sql)
        print("‚úÖ ÂàõÂª∫ port_connection Ë°®")
        
        # Êèê‰∫§Êõ¥Êîπ
        conn.commit()
        print(f"\n‚úÖ Êï∞ÊçÆÂ∫ìÂçáÁ∫ßÂÆåÊàê!")
        print(f"   - Ê∑ªÂä†Á±ªÂà´: {insert_count} ‰∏™")
        print(f"   - ÂàõÂª∫Ë°®: asset_category, asset_port, port_connection")
        
        return True
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå Êï∞ÊçÆÂ∫ìÂçáÁ∫ßÂ§±Ë¥•: {str(e)}")
        return False
    finally:
        conn.close()

if __name__ == '__main__':
    main()